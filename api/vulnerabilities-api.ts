/* tslint:disable */
/* eslint-disable */
/**
 * Container Registry service
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { VulnerabilityRead } from '../model';
/**
 * VulnerabilitiesApi - axios parameter creator
 * @export
 */
export const VulnerabilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the Vulnerability by ID.
         * @summary Retrieve Vulnerability
         * @param {string} vulnerabilityId The ID of the Vulnerability that should be retrieved.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vulnerabilitiesFindByID: async (vulnerabilityId: string,  options: any = {}): Promise<RequestArgs> => {
            if (vulnerabilityId === null || vulnerabilityId === undefined) {
                throw new RequiredError('vulnerabilityId','Required parameter vulnerabilityId was null or undefined when calling vulnerabilitiesFindByID.');
            }
            const localVarPath = `/vulnerabilities/{vulnerabilityId}`
                .replace(`{${"vulnerabilityId"}}`, encodeURIComponent(String(vulnerabilityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VulnerabilitiesApi - functional programming interface
 * @export
 */
export const VulnerabilitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the Vulnerability by ID.
         * @summary Retrieve Vulnerability
         * @param {string} vulnerabilityId The ID of the Vulnerability that should be retrieved.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vulnerabilitiesFindByID(vulnerabilityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VulnerabilityRead>> {
            const axiosArgs = await VulnerabilitiesApiAxiosParamCreator(configuration).vulnerabilitiesFindByID(vulnerabilityId, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * VulnerabilitiesApi - factory interface
 * @export
 */
export const VulnerabilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the Vulnerability by ID.
         * @summary Retrieve Vulnerability
         * @param {string} vulnerabilityId The ID of the Vulnerability that should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vulnerabilitiesFindByID(vulnerabilityId: string, options?: any): AxiosPromise<VulnerabilityRead> {
            return VulnerabilitiesApiFp(configuration).vulnerabilitiesFindByID(vulnerabilityId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for vulnerabilitiesFindByID operation in VulnerabilitiesApi.
 * @export
 * @interface VulnerabilitiesApiVulnerabilitiesFindByIDRequest
 */
export interface VulnerabilitiesApiVulnerabilitiesFindByIDRequest {
    /**
     * The ID of the Vulnerability that should be retrieved.
     * @type {string}
     * @memberof VulnerabilitiesApiVulnerabilitiesFindByID
     */
    readonly vulnerabilityId: string
}

/**
 * VulnerabilitiesApi - object-oriented interface
 * @export
 * @class VulnerabilitiesApi
 * @extends {BaseAPI}
 */
export class VulnerabilitiesApi extends BaseAPI {
    /**
     * Returns the Vulnerability by ID.
     * @summary Retrieve Vulnerability
     * @param {VulnerabilitiesApiVulnerabilitiesFindByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VulnerabilitiesApi
     */
    public vulnerabilitiesFindByID(requestParameters: VulnerabilitiesApiVulnerabilitiesFindByIDRequest, options?: any) {
        return VulnerabilitiesApiFp(this.configuration).vulnerabilitiesFindByID(requestParameters.vulnerabilityId, options).then((request) => request(this.axios, this.basePath));
    }
}
