/* tslint:disable */
/* eslint-disable */
/**
 * Container Registry service
 * Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../model';
/**
 * NamesApi - axios parameter creator
 * @export
 */
export const NamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate that the name is suitable to use for a new registry: - it uses only the characters \"a-z\", \"0-9\", or \"-\" - and starts with a letter and ends with a letter or number - and is between 3 to 63 characters in length - and is available
         * @summary Get container registry name availability
         * @param {string} name The desired registry name
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCheckUsage: async (name: string,  options: any = {}): Promise<RequestArgs> => {
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling namesCheckUsage.');
            }
            const localVarPath = `/names/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NamesApi - functional programming interface
 * @export
 */
export const NamesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Validate that the name is suitable to use for a new registry: - it uses only the characters \"a-z\", \"0-9\", or \"-\" - and starts with a letter and ends with a letter or number - and is between 3 to 63 characters in length - and is available
         * @summary Get container registry name availability
         * @param {string} name The desired registry name
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async namesCheckUsage(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await NamesApiAxiosParamCreator(configuration).namesCheckUsage(name, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * NamesApi - factory interface
 * @export
 */
export const NamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Validate that the name is suitable to use for a new registry: - it uses only the characters \"a-z\", \"0-9\", or \"-\" - and starts with a letter and ends with a letter or number - and is between 3 to 63 characters in length - and is available
         * @summary Get container registry name availability
         * @param {string} name The desired registry name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCheckUsage(name: string, options?: any): AxiosPromise<void> {
            return NamesApiFp(configuration).namesCheckUsage(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for namesCheckUsage operation in NamesApi.
 * @export
 * @interface NamesApiNamesCheckUsageRequest
 */
export interface NamesApiNamesCheckUsageRequest {
    /**
     * The desired registry name
     * @type {string}
     * @memberof NamesApiNamesCheckUsage
     */
    readonly name: string
}

/**
 * NamesApi - object-oriented interface
 * @export
 * @class NamesApi
 * @extends {BaseAPI}
 */
export class NamesApi extends BaseAPI {
    /**
     * Validate that the name is suitable to use for a new registry: - it uses only the characters \"a-z\", \"0-9\", or \"-\" - and starts with a letter and ends with a letter or number - and is between 3 to 63 characters in length - and is available
     * @summary Get container registry name availability
     * @param {NamesApiNamesCheckUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NamesApi
     */
    public namesCheckUsage(requestParameters: NamesApiNamesCheckUsageRequest, options?: any) {
        return NamesApiFp(this.configuration).namesCheckUsage(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}
