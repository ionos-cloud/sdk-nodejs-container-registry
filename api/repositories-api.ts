/* tslint:disable */
/* eslint-disable */
/**
 * Container Registry service
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
// @ts-ignore
import { RepositoryRead } from '../model';
// @ts-ignore
import { RepositoryReadList } from '../model';
/**
 * RepositoriesApi - axios parameter creator
 * @export
 */
export const RepositoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} repositoryName The name of the repository
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesDelete: async (registryId: string, repositoryName: string,  options: any = {}): Promise<RequestArgs> => {
            if (registryId === null || registryId === undefined) {
                throw new RequiredError('registryId','Required parameter registryId was null or undefined when calling registriesRepositoriesDelete.');
            }
            if (repositoryName === null || repositoryName === undefined) {
                throw new RequiredError('repositoryName','Required parameter repositoryName was null or undefined when calling registriesRepositoriesDelete.');
            }
            const localVarPath = `/registries/{registryId}/repositories/{repositoryName}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)))
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the Repository by Name.
         * @summary Retrieve Repository
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {string} repositoryName The Name of the Repository that should be retrieved.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesFindByName: async (registryId: string, repositoryName: string,  options: any = {}): Promise<RequestArgs> => {
            if (registryId === null || registryId === undefined) {
                throw new RequiredError('registryId','Required parameter registryId was null or undefined when calling registriesRepositoriesFindByName.');
            }
            if (repositoryName === null || repositoryName === undefined) {
                throw new RequiredError('repositoryName','Required parameter repositoryName was null or undefined when calling registriesRepositoriesFindByName.');
            }
            const localVarPath = `/registries/{registryId}/repositories/{repositoryName}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)))
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables retrieving all Repositories using pagination and optional filters. 
         * @summary Retrieve all Repositories
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {number} [offset] The first element (of the total list of elements) to include in the response. Use together with limit for pagination.
         * @param {number} [limit] The maximum number of elements to return. Use together with offset for pagination.
         * @param {string} [filterName] Filter resources by name.
         * @param {string} [filterVulnerabilitySeverity] Filter resources by vulnerability severity.
         * @param {'-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount'} [orderBy] The field to order the results by. If not provided, the results will be ordered by the default field.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesGet: async (registryId: string, offset?: number, limit?: number, filterName?: string, filterVulnerabilitySeverity?: string, orderBy?: '-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount',  maxResults?: number, filters?: Map<string, string>, options: any = {}): Promise<RequestArgs> => {
            if (registryId === null || registryId === undefined) {
                throw new RequiredError('registryId','Required parameter registryId was null or undefined when calling registriesRepositoriesGet.');
            }
            const localVarPath = `/registries/{registryId}/repositories`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarApiKeyValue;
            }

            if ((offset === undefined) && (configuration !== undefined)) {
                offset = configuration.getDefaultParamValue('offset');
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if ((limit === undefined) && (configuration !== undefined)) {
                limit = configuration.getDefaultParamValue('limit');
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if ((filterName === undefined) && (configuration !== undefined)) {
                filterName = configuration.getDefaultParamValue('filterName');
            }
            if (filterName !== undefined) {
                localVarQueryParameter['filter.name'] = filterName;
            }

            if ((filterVulnerabilitySeverity === undefined) && (configuration !== undefined)) {
                filterVulnerabilitySeverity = configuration.getDefaultParamValue('filterVulnerabilitySeverity');
            }
            if (filterVulnerabilitySeverity !== undefined) {
                localVarQueryParameter['filter.vulnerabilitySeverity'] = filterVulnerabilitySeverity;
            }

            if ((orderBy === undefined) && (configuration !== undefined)) {
                orderBy = configuration.getDefaultParamValue('orderBy');
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

        if (maxResults !== undefined) {
            localVarQueryParameter['maxResults'] = maxResults;
        }
        if (filters !== undefined) {
            if(typeof(filters) === "object"){
                filters = new Map(Object.entries(filters))
            }
            filters.forEach((value: string, key: string) => {
                localVarQueryParameter["filter." + key] = value;
            });
        }

    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RepositoriesApi - functional programming interface
 * @export
 */
export const RepositoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} repositoryName The name of the repository
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registriesRepositoriesDelete(registryId: string, repositoryName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await RepositoriesApiAxiosParamCreator(configuration).registriesRepositoriesDelete(registryId, repositoryName, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * Returns the Repository by Name.
         * @summary Retrieve Repository
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {string} repositoryName The Name of the Repository that should be retrieved.
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registriesRepositoriesFindByName(registryId: string, repositoryName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryRead>> {
            const axiosArgs = await RepositoriesApiAxiosParamCreator(configuration).registriesRepositoriesFindByName(registryId, repositoryName, options);
            return runRequest(axiosArgs, configuration);
        },
        /**
         * This endpoint enables retrieving all Repositories using pagination and optional filters. 
         * @summary Retrieve all Repositories
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {number} [offset] The first element (of the total list of elements) to include in the response. Use together with limit for pagination.
         * @param {number} [limit] The maximum number of elements to return. Use together with offset for pagination.
         * @param {string} [filterName] Filter resources by name.
         * @param {string} [filterVulnerabilitySeverity] Filter resources by vulnerability severity.
         * @param {'-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount'} [orderBy] The field to order the results by. If not provided, the results will be ordered by the default field.
         * @param {number} [maxResults] - Limits the number of results returned.
         * @param {Map<string,string>} [filters] - Filters query parameters limit results to those containing a matching value for a specific property.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registriesRepositoriesGet(registryId: string, offset?: number, limit?: number, filterName?: string, filterVulnerabilitySeverity?: string, orderBy?: '-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount', maxResults?: number, filters?: Map<string, string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryReadList>> {
            const axiosArgs = await RepositoriesApiAxiosParamCreator(configuration).registriesRepositoriesGet(registryId, offset, limit, filterName, filterVulnerabilitySeverity, orderBy, maxResults, filters, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * RepositoriesApi - factory interface
 * @export
 */
export const RepositoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} repositoryName The name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesDelete(registryId: string, repositoryName: string, options?: any): AxiosPromise<void> {
            return RepositoriesApiFp(configuration).registriesRepositoriesDelete(registryId, repositoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the Repository by Name.
         * @summary Retrieve Repository
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {string} repositoryName The Name of the Repository that should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesFindByName(registryId: string, repositoryName: string, options?: any): AxiosPromise<RepositoryRead> {
            return RepositoriesApiFp(configuration).registriesRepositoriesFindByName(registryId, repositoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables retrieving all Repositories using pagination and optional filters. 
         * @summary Retrieve all Repositories
         * @param {string} registryId The ID (UUID) of the Registry.
         * @param {number} [offset] The first element (of the total list of elements) to include in the response. Use together with limit for pagination.
         * @param {number} [limit] The maximum number of elements to return. Use together with offset for pagination.
         * @param {string} [filterName] Filter resources by name.
         * @param {string} [filterVulnerabilitySeverity] Filter resources by vulnerability severity.
         * @param {'-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount'} [orderBy] The field to order the results by. If not provided, the results will be ordered by the default field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesGet(registryId: string, offset?: number, limit?: number, filterName?: string, filterVulnerabilitySeverity?: string, orderBy?: '-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount', options?: any): AxiosPromise<RepositoryReadList> {
            return RepositoriesApiFp(configuration).registriesRepositoriesGet(registryId, offset, limit, filterName, filterVulnerabilitySeverity, orderBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registriesRepositoriesDelete operation in RepositoriesApi.
 * @export
 * @interface RepositoriesApiRegistriesRepositoriesDeleteRequest
 */
export interface RepositoriesApiRegistriesRepositoriesDeleteRequest {
    /**
     * The unique ID of the registry
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesDelete
     */
    readonly registryId: string

    /**
     * The name of the repository
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesDelete
     */
    readonly repositoryName: string
}

/**
 * Request parameters for registriesRepositoriesFindByName operation in RepositoriesApi.
 * @export
 * @interface RepositoriesApiRegistriesRepositoriesFindByNameRequest
 */
export interface RepositoriesApiRegistriesRepositoriesFindByNameRequest {
    /**
     * The ID (UUID) of the Registry.
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesFindByName
     */
    readonly registryId: string

    /**
     * The Name of the Repository that should be retrieved.
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesFindByName
     */
    readonly repositoryName: string
}

/**
 * Request parameters for registriesRepositoriesGet operation in RepositoriesApi.
 * @export
 * @interface RepositoriesApiRegistriesRepositoriesGetRequest
 */
export interface RepositoriesApiRegistriesRepositoriesGetRequest {
    /**
     * The ID (UUID) of the Registry.
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly registryId: string

    /**
     * The first element (of the total list of elements) to include in the response. Use together with limit for pagination.
     * @type {number}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly offset?: number

    /**
     * The maximum number of elements to return. Use together with offset for pagination.
     * @type {number}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly limit?: number

    /**
     * Filter resources by name.
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly filterName?: string

    /**
     * Filter resources by vulnerability severity.
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly filterVulnerabilitySeverity?: string

    /**
     * The field to order the results by. If not provided, the results will be ordered by the default field.
     * @type {'-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount'}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly orderBy?: '-lastPush' | '-lastPull' | '-artifactCount' | '-pullCount' | '-pushCount' | 'name' | 'lastPush' | 'lastPull' | 'artifactCount' | 'pullCount' | 'pushCount'
    /**
     * limits the number of results returned
     * @type {number}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    readonly maxResults?: number
    /**
     * limits results to those containing a matching value for a specific property
     * @type {Map<string,string>}
     * @memberof RepositoriesApiRegistriesRepositoriesGet
     */
    filters?: Map<string, string>
}

/**
 * RepositoriesApi - object-oriented interface
 * @export
 * @class RepositoriesApi
 * @extends {BaseAPI}
 */
export class RepositoriesApi extends BaseAPI {
    /**
     * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
     * @summary Delete repository
     * @param {RepositoriesApiRegistriesRepositoriesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public registriesRepositoriesDelete(requestParameters: RepositoriesApiRegistriesRepositoriesDeleteRequest, options?: any) {
        return RepositoriesApiFp(this.configuration).registriesRepositoriesDelete(requestParameters.registryId, requestParameters.repositoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the Repository by Name.
     * @summary Retrieve Repository
     * @param {RepositoriesApiRegistriesRepositoriesFindByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public registriesRepositoriesFindByName(requestParameters: RepositoriesApiRegistriesRepositoriesFindByNameRequest, options?: any) {
        return RepositoriesApiFp(this.configuration).registriesRepositoriesFindByName(requestParameters.registryId, requestParameters.repositoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables retrieving all Repositories using pagination and optional filters. 
     * @summary Retrieve all Repositories
     * @param {RepositoriesApiRegistriesRepositoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public registriesRepositoriesGet(requestParameters: RepositoriesApiRegistriesRepositoriesGetRequest, options?: any) {
        return RepositoriesApiFp(this.configuration).registriesRepositoriesGet(requestParameters.registryId, requestParameters.offset, requestParameters.limit, requestParameters.filterName, requestParameters.filterVulnerabilitySeverity, requestParameters.orderBy, requestParameters.maxResults, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }
}
