/* tslint:disable */
/* eslint-disable */
/**
 * Container Registry service
 * Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration, DEFAULT_MAX_RETRIES, DEFAULT_MAX_WAIT_TIME } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, backOff, runRequest } from '../base';
/**
 * RepositoriesApi - axios parameter creator
 * @export
 */
export const RepositoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} name The name of the repository
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesDelete: async (registryId: string, name: string,  options: any = {}): Promise<RequestArgs> => {
            if (registryId === null || registryId === undefined) {
                throw new RequiredError('registryId','Required parameter registryId was null or undefined when calling registriesRepositoriesDelete.');
            }
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling registriesRepositoriesDelete.');
            }
            const localVarPath = `/registries/{registryId}/repositories/{name}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RepositoriesApi - functional programming interface
 * @export
 */
export const RepositoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} name The name of the repository
         
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registriesRepositoriesDelete(registryId: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const axiosArgs = await RepositoriesApiAxiosParamCreator(configuration).registriesRepositoriesDelete(registryId, name, options);
            return runRequest(axiosArgs, configuration);
        },
    }
};

/**
 * RepositoriesApi - factory interface
 * @export
 */
export const RepositoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
         * @summary Delete repository
         * @param {string} registryId The unique ID of the registry
         * @param {string} name The name of the repository
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registriesRepositoriesDelete(registryId: string, name: string, options?: any): AxiosPromise<void> {
            return RepositoriesApiFp(configuration).registriesRepositoriesDelete(registryId, name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registriesRepositoriesDelete operation in RepositoriesApi.
 * @export
 * @interface RepositoriesApiRegistriesRepositoriesDeleteRequest
 */
export interface RepositoriesApiRegistriesRepositoriesDeleteRequest {
    /**
     * The unique ID of the registry
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesDelete
     */
    readonly registryId: string

    /**
     * The name of the repository
     * @type {string}
     * @memberof RepositoriesApiRegistriesRepositoriesDelete
     */
    readonly name: string
}

/**
 * RepositoriesApi - object-oriented interface
 * @export
 * @class RepositoriesApi
 * @extends {BaseAPI}
 */
export class RepositoriesApi extends BaseAPI {
    /**
     * Delete all repository contents    The registry V2 API allows manifests and blobs to be deleted individually but it is not possible to remove an entire repository.   This operation is provided for convenience
     * @summary Delete repository
     * @param {RepositoriesApiRegistriesRepositoriesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepositoriesApi
     */
    public registriesRepositoriesDelete(requestParameters: RepositoriesApiRegistriesRepositoriesDeleteRequest, options?: any) {
        return RepositoriesApiFp(this.configuration).registriesRepositoriesDelete(requestParameters.registryId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}
